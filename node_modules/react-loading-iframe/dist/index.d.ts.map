{"mappings":";AASA,eAAgB,SAAQ,qBAAqB,GAAG,CAAC;IAC/C,sEAAsE;IACtE,QAAQ,CAAC,EAAE,YAAY,CAAC;CACzB;AAED,mGAAmG;AACnG,QAAA,MAAM,aAAa,EAAE,kBAAkB,KAAK,CA2B3C,CAAC;AAEF,eAAe,aAAa,CAAC","sources":["src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,"import * as React from \"react\";\nimport {\n  Fragment,\n  FunctionComponent,\n  IframeHTMLAttributes,\n  ReactElement,\n  useState,\n} from \"react\";\n\ninterface Props extends IframeHTMLAttributes<any> {\n  /** React element that will be rendered when the iframe is loading. */\n  skeleton?: ReactElement;\n}\n\n/** An iframe that takes a skeleton as a prop and renders the skeleton until the iframe is ready */\nconst LoadingIframe: FunctionComponent<Props> = (props) => {\n  const { skeleton, className, ...iframeProps } = props;\n  const [iframeLoading, setIframeLoading] = useState(true);\n\n  if (!skeleton) {\n    console.warn(\n      \"react-loading-iframe: Rendered without skeleton, consider using an html iframe\"\n    );\n  }\n\n  return (\n    <Fragment>\n      {iframeLoading && skeleton}\n      <iframe\n        className={className}\n        {...iframeProps}\n        style={{\n          display: iframeLoading ? \"none\" : \"block\",\n          height: \"100%\",\n          width: \"100%\",\n        }}\n        onLoad={() => {\n          setIframeLoading(false);\n        }}\n      />\n    </Fragment>\n  );\n};\n\nexport default LoadingIframe;\n"],"names":[],"version":3,"file":"index.d.ts.map"}