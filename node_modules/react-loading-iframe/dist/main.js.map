{"mappings":";;;;;;;;;;;;A;;A,I,4B,G,a,U,M,I,S,C,E,C,E;I,I,C,G,E,A;I,I,I,C,I,C,C,I,M,C,S,C,c,C,I,C,C,E,C,C,I,C,C,O,C,C,C,G,C,E,C,C,C,C,G,C,C,C,C,C;I,I,C,I,I,I,O,M,C,qB,K,U,E;Q,I,I,C,G,C,E,C,G,M,C,qB,C,C,C,E,C,G,C,C,M,E,C,E,C,I,C,C,O,C,C,C,C,C,C,G,C,I,M,C,S,C,oB,C,I,C,C,E,C,C,C,C,C,E,C,C,C,C,C,C,C,G,C,C,C,C,C,C,C,C;K;I,O,C,C;C,A;ACcA,mGAAmG,CACnG,MAAM,mCAAa,GAA6B,CAAC,KAAK,GAAtD;IACE,MAAM,YAAE,QAAQ,CAAA,aAAE,SAAS,CAAA,EAAA,GAAqB,KAAK,EAArB,WAAW,GAAA,4BAAA,CAAK,KAAK,EAA/C;QAAA,UAAA;QAAA,WAAA;KAAuC,CAAQ,AAAC;IACtD,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,CAAA,GAAA,qBAAQ,CAAA,CAAC,IAAI,CAAC,AAAC;IAEzD,IAAI,CAAC,QAAQ,EACX,OAAO,CAAC,IAAI,CACV,gFAAgF,CACjF,CAAC;IAGJ,qBACE,0BAAA,CAAC,CAAA,GAAA,qBAAQ,CAAA,EADX,IAAA,EAEK,aAAa,IAAI,QAAQ,gBAC1B,0BAAA,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA;QACE,SAAS,EAAE,SAAS;KAAA,EAChB,WAAW,EAAA;QACf,KAAK,EAAE;YACL,OAAO,EAAE,aAAa,GAAG,MAAM,GAAG,OAAO;YACzC,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,MAAM;SACd;QACD,MAAM,EAAE,IADP;YAEC,gBAAgB,CAAC,KAAK,CAAC,CAAC;SACzB;KAAA,CAAA,CACD,CACO,CACX;CACH,AAAC;IAEF,wCAA6B,GAAd,mCAAa","sources":["src/index.tsx","index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n  Fragment,\n  FunctionComponent,\n  IframeHTMLAttributes,\n  ReactElement,\n  useState,\n} from \"react\";\n\ninterface Props extends IframeHTMLAttributes<any> {\n  /** React element that will be rendered when the iframe is loading. */\n  skeleton?: ReactElement;\n}\n\n/** An iframe that takes a skeleton as a prop and renders the skeleton until the iframe is ready */\nconst LoadingIframe: FunctionComponent<Props> = (props) => {\n  const { skeleton, className, ...iframeProps } = props;\n  const [iframeLoading, setIframeLoading] = useState(true);\n\n  if (!skeleton) {\n    console.warn(\n      \"react-loading-iframe: Rendered without skeleton, consider using an html iframe\"\n    );\n  }\n\n  return (\n    <Fragment>\n      {iframeLoading && skeleton}\n      <iframe\n        className={className}\n        {...iframeProps}\n        style={{\n          display: iframeLoading ? \"none\" : \"block\",\n          height: \"100%\",\n          width: \"100%\",\n        }}\n        onLoad={() => {\n          setIframeLoading(false);\n        }}\n      />\n    </Fragment>\n  );\n};\n\nexport default LoadingIframe;\n",null],"names":[],"version":3,"file":"main.js.map"}