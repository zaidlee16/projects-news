{
  "version": 3,
  "sources": ["../../react-loading-iframe/dist/src/index.tsx", "../../react-loading-iframe/dist/index.tsx"],
  "sourcesContent": ["import * as React from \"react\";\nimport {\n  Fragment,\n  FunctionComponent,\n  IframeHTMLAttributes,\n  ReactElement,\n  useState,\n} from \"react\";\n\ninterface Props extends IframeHTMLAttributes<any> {\n  /** React element that will be rendered when the iframe is loading. */\n  skeleton?: ReactElement;\n}\n\n/** An iframe that takes a skeleton as a prop and renders the skeleton until the iframe is ready */\nconst LoadingIframe: FunctionComponent<Props> = (props) => {\n  const { skeleton, className, ...iframeProps } = props;\n  const [iframeLoading, setIframeLoading] = useState(true);\n\n  if (!skeleton) {\n    console.warn(\n      \"react-loading-iframe: Rendered without skeleton, consider using an html iframe\"\n    );\n  }\n\n  return (\n    <Fragment>\n      {iframeLoading && skeleton}\n      <iframe\n        className={className}\n        {...iframeProps}\n        style={{\n          display: iframeLoading ? \"none\" : \"block\",\n          height: \"100%\",\n          width: \"100%\",\n        }}\n        onLoad={() => {\n          setIframeLoading(false);\n        }}\n      />\n    </Fragment>\n  );\n};\n\nexport default LoadingIframe;\n", null],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;ACeA,QAAM,sCAA0C,CAAC,UAAjD;AACE,YAAM,EAAA,UAAU,UAAW,IAAqB,OAAhB,cAAW,6BAAK,OAA1C;QAAA;QAAA;OAAuC;AAC7C,YAAM,CAAC,eAAe,gBAAgB,KAAI,GAAA,aAAA,UAAS,IAAI;AAEvD,UAAI,CAAC,SACH,SAAQ,KACN,gFAAgF;AAIpF,aACE,aAAA,eAAC,GAAA,aAAA,WADH,MAEK,iBAAiB,UAClB,aAAA,cAAA,UAAA,OAAA,OAAA;QACE;SACI,aAAW;QACf,OAAO;UACL,SAAS,gBAAgB,SAAS;UAClC,QAAQ;UACR,OAAO;;QAET,QAAQ,MADP;AAEC,2BAAiB,KAAK;;OACvB,CAAA,CACD;;QAKR,2CAAe;;;",
  "names": []
}
